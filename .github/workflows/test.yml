name: Python Tests

on:
  push:
    branches: 
      - '**'
  pull_request:
    branches: 
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Set environment variables
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        DASHBOARD_PASSWORD: ${{ secrets.DASHBOARD_PASSWORD }}
      run: |
        echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> $GITHUB_ENV
        echo "PINECONE_API_KEY=$PINECONE_API_KEY" >> $GITHUB_ENV
        echo "DASHBOARD_PASSWORD=$DASHBOARD_PASSWORD" >> $GITHUB_ENV

    - name: Run tests with coverage
      run: |
        # Create test data directories if they don't exist
        mkdir -p fast_text/models
        mkdir -p data_documents
        mkdir -p argilla_data_49
        mkdir -p monitor/logs
        
        # Create a dummy model file for testing
        echo "dummy model" > fast_text/models/tax_classifier.bin
        
        # List test files for debugging
        echo "Test files found:"
        find . -name "test_*.py" -o -name "*_test.py"
        
        # Run tests with coverage and detailed output
        python -m pytest \
          --verbose \
          --cov=fast_text \
          --cov-report=xml \
          --cov-report=term-missing \
          -v fast_text/test_relevance.py
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        DASHBOARD_PASSWORD: ${{ secrets.DASHBOARD_PASSWORD }}
        PYTHONPATH: ${{ github.workspace }}
        PYTEST_ADDOPTS: "--color=yes"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/fizcochat/rag-chatbot:latest
            ghcr.io/fizcochat/rag-chatbot:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Log in to GHCR
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
      
      - name: Deploy Container
        run: |
          echo "Deploying container..."
          docker pull ghcr.io/fizcochat/rag-chatbot:latest
          docker stop rag-chatbot || true
          docker rm rag-chatbot || true
          docker run -d --name rag-chatbot -p 8501:8501 \
            -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            -e PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }} \
            -e DASHBOARD_PASSWORD=${{ secrets.DASHBOARD_PASSWORD }} \
            ghcr.io/fizcochat/rag-chatbot:latest